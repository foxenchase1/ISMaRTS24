%Brachistochrone Workshop
%Use this for testing different scripts for the brachistochrone problem
%Chase Foxen
%3/31/24

%Using equations from the paper Isochrones and Brachistochrones by 
%Garry J. Tee from the University of Auckland
%
%He found that for attractive inverse square gravity, the integrals for 
%angle, arc length, and time (all dependent on radius) are
%
% \Theta(r,R) = sqrt(\frac{R^3}{1-R}) \int_r^1 \frac{1-x}{x\sqrt{(1-x)(x-R)
% [x^2+Rx+\frac{R^2}{1-R}]}} dx
%
% S(r,R) = \int_r^1 \frac{x^2}{\sqrt(x(x-R)[x^2+Rx+\frac{R^2}{1-R}]} dx
%
% T(r,R) = \int_r^1 \frac{x^2}{\sqrt{2(1-x)(x-R)[x^2+Rx+\frac{R^2}{1-R}]}}
% dx
%
% Note that the upper bound of the integrals is 1, as he used 1 as the
% starting radius and then descended to some minimum radius R and allowed
% the cycloid to return to 1. In this case we are interested in specifying
% a maximum radius from the center of our attracting body and then allowing
% the curve to follow to the minimum radius R and no further. 
%
%% Inverse Square Attractive Gravity Brachistochrone (ISAGB)

close all
clear
clc

% Set up Rmax, Rmin, and step size with inputs

Rmax = input('Specify Rmax.   ');
Rmax_check = isempty(Rmax);
if Rmax_check == 1
    disp('ERROR! You must specify an Rmax value.')
else
    disp(Rmax)
    Rmin = input('Specify Rmin.   ');
    Rmin_check = isempty(Rmin);
    if Rmin_check == 1
            disp('ERROR! You must specify an Rmin value.')
    elseif Rmax <= Rmin
            disp('ERROR! You must have Rmax > Rmin.')
        else
            disp(Rmin)
            Theta_min = input('Specify the radial coordinate for Rmin. Use radians between 0 and pi/2.    ');
            Theta_min_check = isempty(Theta_min);
        if Theta_min_check == 1
            disp('ERROR! You must specify a radial coordinate for the endpoint.')
        else
            h = input('Specify step size for radius.   ');
            h_check = isempty(h);
            if h_check == 1
                disp('ERROR! You must specify a step size.')
            else   
 

        % --- Computations ---

        % Finding R_apse (apsidial radius of solution)

        R_apse_root_func = @(R) gamma_R_fun(Rmax, Rmin, Theta_min, R)-Theta_min;
        R1 = 0.9*Rmin;
        R2 = 0.7*Rmin;
        R_apse = secant_root(R_apse_root_func,R1,R2);
        
        % Create vector of radius values

        r_mem1 = R_apse:h:Rmax;
        r_mem2 = R_apse:h:Rmin;
        r_mem1 = flip(r_mem1);
        r_mem = [r_mem1,r_mem2];

        %Rmax_lower = Rmax-h;
        %r = R_apse:h:Rmax_lower;
        r = r_mem;
        
        % Compute angle data

        angle_data = isg_ang_integ(r,Rmax,R_apse);
        %angle_data = [0, angle_data];
        Aps_Theta = angle_data(end);
        angle_data_2 = 2*angle_data(end)*ones(1,length(angle_data))-angle_data;
        %angle_data = [angle_data,angle_data_2];

        % Compute time data

        time_data = isg_t_integ(r,Rmax,R_apse);
        %time_data = [0, time_data];
        %time_data_2 = 2*time_data(end)*ones(1,length(time_data))-time_data;
        %time_data = [time_data,time_data_2];

        % Compute arc length data

        % INSERT ARC LENGTH FUNCTION HERE
        % arc_data = isg_arc_integ(r,Rmax,Rmin);
        % arc_data = [0, arc_data];

        % --- Generate Plots ---
        
        % Curve Plot
        figure(1)
        [x, y] = pol2cart(angle_data,r_mem);
        plot(y,x)

        figure(2)
        polarplot(angle_data,r)

        % Angle vs. Radius
        figure(3)
        plot(flip(r_mem), angle_data,'r')
        title('Angle vs. Radius')
        xlabel('Radius')
        ylabel('Angle [radians]')
        
        % Time vs. Radius 
        figure(4)
        plot(flip(r_mem), time_data,'b')
        title('Time vs. Radius')
        xlabel('Radius')
        ylabel('Time')

        % Arc Length vs. Radius
        %figure(4)
        %plot(r_mem, arc_data,'m')
        %title('Arc Length vs. Radius')
        %xlabel('Radius')
        %ylabel('Arc Length')
    
            end
       end
   end
end
